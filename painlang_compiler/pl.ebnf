paingram = statementlist

statementlist = statement 
              | statement statementlist

statement = assignment ';'
          | variableDeclaration ';'
          | printStatement ';'
          | ifStatement
          | functionDeclaration
          | functionCall
          | returnStatement
          | block
          | forLoop
          | empty

printStatement = "print" "(" expression ")"

variableDeclaration = 'let' vardec 
vardec = identifier ':' typeRule
           | identifier ':' typeRule '=' expression

functionDeclaration = 'function' identifier '(' parameterList ')' '->' typeRule block
parameterLis = parameters | empty
parameters = identifier | identifier ',' parameters
functionCall = identifier  '(' argumentList ')'
argumentList = arguments
arguments = expression | expression ',' arguments
returnStatement = 'return' expression
arglist = identifier 
            | identifier , arglist
block = '{' statementlist '}'
forLoop = "for" '(' forInitExpression ';' condExpression ';' assignment ')' block
forInitExpression = assignment | varDeclaration
assignment = identifier '=' expression
identifier = letter {letter} 
typeRule: "string" | "number" | "bool"
letter = "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
       | "x" | "y" | "z" 
expression = term | expression '+' term
term = factor | term '*' factor | term '+' factor
factor = var | '+' factor
var = identifier | constant | '(' expression ')'
constant = digit | digit constant
digit = "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"
ifStatement:  IF '(' condExpression ')' block 
            | IF '(' condExpression ')' block ELSE block 
condExpression: expression relop expression;
relop = '==' | '!=' | '>=' | '<=' | '>' | '<'; 
empty =