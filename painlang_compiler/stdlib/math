// Funkce umocňuje základ požadovanným exponentem
function pow(base: number, exp: number) -> number {
    let result : number = 1;
    for(let i : number = 0; i < exp; i = i +1) {
        result *= base;
    }

    return result;
}

function isPrime(n: number) -> bool {
  if (n <= 1) {return false;}
  
  let i : number = 2;
  while (i * i <= n) {
    if (modulo(n,i) == 0) {
      return false;  // jsi dělitelný i => VYPADNI
    }
    i++;
  }
  return true;  
}

function factorial(n: number) -> number {
   let fact :number = 1;

    for (let i : number = 1; i <= n; i = i + 1) {
        fact = fact * i;
    }

    return fact;
}

function modulo(a: number, b: number) -> number {
    return a - (a / b) * b;
}

function isEven(n: number) -> bool {
    if (modulo(n,2) == 0) {
        return true;
    } else {
        return false;
    }
}

function isOdd(n:number) -> bool {
      if (modulo(n,2) != 0) {
        return true;
    } else {
        return false;
    }
}

// TODO: Dodělat do jazyka konstanty, aby se nedaly měnit
let PI: number = 3;
let g: number = 10;
